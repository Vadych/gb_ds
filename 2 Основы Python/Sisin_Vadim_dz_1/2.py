# 2. Создать список, состоящий из кубов нечётных чисел от 1 до 1000 
# (куб X - третья степень числа X):

# a. Вычислить сумму тех чисел из этого списка, сумма цифр которых делится нацело на 7.
# Например, число «19 ^ 3 = 6859» будем включать в сумму, так как 6 + 8 + 5 + 9 = 28 – делится
# нацело на 7. Внимание: использовать только арифметические операции!
# b. К каждому элементу списка добавить 17 и заново вычислить сумму тех чисел из этого списка,
# сумма цифр которых делится нацело на 7.
# c.* Решить задачу под пунктом b, не создавая новый список.


cube_list = [i ** 3 for i in range(1, 1001)]
sum_div_by_7 = 0
for number in cube_list:
    # Тут я не до конца понял задание. Если использовать только арефмитические операции,
    # то допустимо ли использовать len(str(number)) для определения разрядности? 
    # Исходил из того, что нельзя.
    sum_digit = 0
    for idx_digit in range (1,10): # 10, т.к. максимум 9 разрядов
        digit = number % (10 ** idx_digit) // 10 ** (idx_digit - 1)
        sum_digit += digit
    
    if not sum_digit % 7:
        sum_div_by_7 += number

print ('Сумма первого массива - ', sum_div_by_7)
# Тут тоже немного непонятка. Нужно ли делать задание буквально - сначала вычислить одну сумму,
# потом добавить 17 в массив и потом опять вычислить сумму. Решил выполнить задание буквально.
# Но если цель именно получить на выходе новый массив и все суммы, то это можно проделать 
# все в одном цикле, слегка его модифицировав.
# Естественно подсчет суммы цифр логичней вынести в отдельную функцию

for i, _ in enumerate (cube_list):
    cube_list[i] += 17

sum17_div_by_7 = 0
for number in cube_list:
    sum_digit = 0
    for idx_digit in range (1,10):
        digit = number % (10 ** idx_digit) // 10 ** (idx_digit - 1)
        sum_digit += digit
    if not sum_digit % 7:
        sum17_div_by_7 += number

print ('Сумма второго массива - ', sum17_div_by_7)